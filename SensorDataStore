pragma solidity >=0.6.0 <0.9.0;
pragma experimental ABIEncoderV2 ;
 contract datastore {
address public owner ;
event GrantRole ( bytes32 indexed role , address indexed account );
event RemoveRole ( bytes32 indexed role , address indexed account );
constructor () {
owner =msg. sender ;
_grantRole (Admin , msg . sender );
 }

 mapping ( string => uint []) public tagindex ;
 string [] public database ;
 uint counter =0;
 mapping ( bytes32 => mapping ( address = > bool )) public roles ;

bytes32 private constant Admin = keccak256 (abi. encodePacked (" Admin ")) ;
bytes32 public constant Read = keccak256 ( abi . encodePacked (" Read "));
bytes32 public constant Write = keccak256 (abi. encodePacked (" Write "));


modifier onlyRole ( bytes32 _role ) {
 require ( roles [ _role ][ msg . sender ], "not authorized ");
 _;
 }

 function _grantRole ( bytes32 _role , address _account ) internal {
if ( _role == Admin ) {
roles [ Admin ][ _account ]= true ;
 roles [ Write ][ _account ]= true ;
 roles [ Read ][ _account ]= true ;
 } else if( _role == Write ) {
 roles [ Write ][ _account ]= true ;
 roles [ Read ][ _account ]= true ;
 } else {
 roles [ _role ][ _account ]= true ;
 }

 emit GrantRole (_role , _account );
 }

 function grantAdminRole ( address _account ) external onlyRole ( Admin ){
 require ( _account != address (0) , " Roles : account is the zero address ");
 require (! roles [ Admin ][ _account ], " the Role with address is already
available ") ;

 if ( msg . sender == owner ) {
 _grantRole (Admin , _account ) ;
 } else {
 revert (" admin not authorized to grant Admin Role ");
 }
 }

 function grantWriteRole ( address _account ) external onlyRole ( Admin ){
 require ( _account != address (0) , " Roles : account is the zero address ");
 require (! roles [ Write ][ _account ], " the Role with address is already
available ") ;
 _grantRole (Write , _account );
 }

 function grantReadRole ( address _account ) external onlyRole ( Admin ){
 require ( _account != address (0) , " Roles : account is the zero address ");
require (! roles [ Read ][ _account ], " the Role with address is already
available ") ;
 _grantRole (Read , _account ) ;
 }

 function deleteAdminRole ( address _account ) external onlyRole ( Admin ) {
 require ( roles [ Admin ][ _account ], " the Role with address is not available
 be deleted "); check if the address available

 if ( msg . sender == owner ) {
 deleteRole (Admin , _account );
 } else {
 revert (" admin not authorized to delete owner ");
 }
 }

 function deleteWriteRole ( address _account ) external onlyRole ( Admin ) {
 require ( roles [ Write ][ _account ], " the Role with address is not available
to be deleted "); check if the address available
 deleteRole (Write , _account );
 }

 function deleteReadRole ( address _account ) external onlyRole ( Admin ) {
 require ( roles [ Read ][ _account ] , " the Role with address is not available
be deleted ") ; check if the address available
 deleteRole (Read , _account );
 }

 function deleteRole ( bytes32 _role , address _account ) internal onlyRole (
Admin ) {
 if( _role == Admin ) {
 roles [ Admin ][ _account ]= false ; false means deactive the content means
delete

 roles [ Write ][ _account ]= false ;
 roles [ Read ][ _account ]= false ;
 } else if( _role == Write ) {
 roles [ Write ][ _account ]= false ;
 roles [ Read ][ _account ]= false ;
 } else {
 roles [ _role ][ _account ]= false ;
 }
 emit RemoveRole (_role , _account );
 }
 function write ( string memory tag , string memory data ) public onlyRole ( Wr
 database . push ( data );
 tagindex [ tag ]. push ( counter ) ;
 counter ++;
 }

function read ( string memory tag ) public onlyRole ( Read ) view returns ( st
[] memory ) {
 uint [] memory indices = tagindex [ tag ];
 uint length = indices . length ;
 string [] memory result = new string []( length ) ;
for ( uint i =0;i< length ;i++) {
 string memory entry = database [ indices [i ]];

 result [i] = entry ;
 }
 return result ;
}

 function readall () public onlyRole ( Read ) view returns ( string [] memory )
return database ;
 }

 function readrecent ( uint n) public onlyRole ( Read ) view returns ( string [
memory ) {
 if(n >= counter ) {
 return database ;
 }
 string [] memory result = new string [](n) ;
 for ( uint i =0;i<n;i++) {
 string memory entry = database [ counter -i -1];
 result [i] = entry ;
 }
 return result ;
 }

 function getDatabaseSize () public onlyRole ( Read ) view returns ( uint ) {
 return counter ;

 }
